// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TheInternetSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "HomeNav_Feature")]
    public partial class HomeNavFeature : object, Xunit.IClassFixture<HomeNavFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "HomeNav_Feature"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "HomeNav.feature"
#line hidden
        
        public HomeNavFeature(HomeNavFeature.FixtureData fixtureData, TheInternetSpecFlow_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "HomeNav", "Navigation links to the rest of the website that are on the home page\r\n\r\nThe Java" +
                    "Script to obtain the links:\r\ndocument.querySelectorAll(\"ul a\").forEach((a) => { " +
                    "console.log(a.href) })", ProgrammingLanguage.CSharp, new string[] {
                        "HomeNav_Feature"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Number of links on home page is 44")]
        [Xunit.TraitAttribute("FeatureTitle", "HomeNav")]
        [Xunit.TraitAttribute("Description", "Number of links on home page is 44")]
        [Xunit.TraitAttribute("Category", "HomeNav_Scenario")]
        public virtual void NumberOfLinksOnHomePageIs44()
        {
            string[] tagsOfScenario = new string[] {
                    "HomeNav_Scenario"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Number of links on home page is 44", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
    testRunner.Given("the links on the main section of the home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
    testRunner.Then("the count of the number of links on the home page should be 44", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Linked pages on the home page exist")]
        [Xunit.TraitAttribute("FeatureTitle", "HomeNav")]
        [Xunit.TraitAttribute("Description", "Linked pages on the home page exist")]
        [Xunit.TraitAttribute("Category", "HomeNav_Scenario")]
        [Xunit.InlineDataAttribute("abtest", "200", new string[0])]
        [Xunit.InlineDataAttribute("add_remove_elements/", "200", new string[0])]
        [Xunit.InlineDataAttribute("basic_auth", "401", new string[0])]
        [Xunit.InlineDataAttribute("broken_images", "200", new string[0])]
        [Xunit.InlineDataAttribute("challenging_dom", "200", new string[0])]
        [Xunit.InlineDataAttribute("checkboxes", "200", new string[0])]
        [Xunit.InlineDataAttribute("context_menu", "200", new string[0])]
        [Xunit.InlineDataAttribute("digest_auth", "401", new string[0])]
        [Xunit.InlineDataAttribute("disappearing_elements", "200", new string[0])]
        [Xunit.InlineDataAttribute("drag_and_drop", "200", new string[0])]
        [Xunit.InlineDataAttribute("dropdown", "200", new string[0])]
        [Xunit.InlineDataAttribute("dynamic_content", "200", new string[0])]
        [Xunit.InlineDataAttribute("dynamic_controls", "200", new string[0])]
        [Xunit.InlineDataAttribute("dynamic_loading", "200", new string[0])]
        [Xunit.InlineDataAttribute("entry_ad", "200", new string[0])]
        [Xunit.InlineDataAttribute("exit_intent", "200", new string[0])]
        [Xunit.InlineDataAttribute("download", "200", new string[0])]
        [Xunit.InlineDataAttribute("upload", "200", new string[0])]
        [Xunit.InlineDataAttribute("floating_menu", "200", new string[0])]
        [Xunit.InlineDataAttribute("forgot_password", "200", new string[0])]
        [Xunit.InlineDataAttribute("login", "200", new string[0])]
        [Xunit.InlineDataAttribute("frames", "200", new string[0])]
        [Xunit.InlineDataAttribute("geolocation", "200", new string[0])]
        [Xunit.InlineDataAttribute("horizontal_slider", "200", new string[0])]
        [Xunit.InlineDataAttribute("hovers", "200", new string[0])]
        [Xunit.InlineDataAttribute("infinite_scroll", "200", new string[0])]
        [Xunit.InlineDataAttribute("inputs", "200", new string[0])]
        [Xunit.InlineDataAttribute("jqueryui/menu", "200", new string[0])]
        [Xunit.InlineDataAttribute("javascript_alerts", "200", new string[0])]
        [Xunit.InlineDataAttribute("javascript_error", "200", new string[0])]
        [Xunit.InlineDataAttribute("key_presses", "200", new string[0])]
        [Xunit.InlineDataAttribute("large", "200", new string[0])]
        [Xunit.InlineDataAttribute("windows", "200", new string[0])]
        [Xunit.InlineDataAttribute("nested_frames", "200", new string[0])]
        [Xunit.InlineDataAttribute("notification_message", "200", new string[0])]
        [Xunit.InlineDataAttribute("redirector", "200", new string[0])]
        [Xunit.InlineDataAttribute("download_secure", "401", new string[0])]
        [Xunit.InlineDataAttribute("shadowdom", "200", new string[0])]
        [Xunit.InlineDataAttribute("shifting_content", "200", new string[0])]
        [Xunit.InlineDataAttribute("slow", "200", new string[0])]
        [Xunit.InlineDataAttribute("tables", "200", new string[0])]
        [Xunit.InlineDataAttribute("status_codes", "200", new string[0])]
        [Xunit.InlineDataAttribute("typos", "200", new string[0])]
        [Xunit.InlineDataAttribute("tinymce", "200", new string[0])]
        public virtual void LinkedPagesOnTheHomePageExist(string page, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "HomeNav_Scenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("page", page);
            argumentsOfScenario.Add("Result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Linked pages on the home page exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
    testRunner.Given("the links on the main section of the home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
    testRunner.Given(string.Format("the {0} link exists on the main section of the home page", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
    testRunner.When(string.Format("I send an HTTP Request to the {0} link", page), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then(string.Format("the HTTP Response Status Code should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                HomeNavFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                HomeNavFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
